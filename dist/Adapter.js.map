{
  "version": 3,
  "sources": [
    "src/Adapter.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# template adapter\n# Underscore's Template Module\n# Courtesy of underscorejs.org\n\nclass UnderscoreTemplateAdapter\n  constructor: () ->\n    this\n\n  # JavaScript micro-templating, similar to John Resig's implementation.\n  # Underscore templating handles arbitrary delimiters, preserves whitespace,\n  # and correctly escapes quotes within interpolated code.\n  tmpl: (text, data) ->\n    # var render\n\n    _ = {}\n\n    # List of HTML entities for escaping.\n    entityMap =\n      escape:\n        '&': '&amp;'\n        '<': '&lt;'\n        '>': '&gt;'\n        '\"': '&quot;'\n        # jshint quotmark:false\n        \"'\": '&#x27;'\n        '/': '&#x2F;'\n\n    escapeKeys = '&<>\"\\'/'\n    unescapeKeys = '&amp;|&lt;|&gt;|&quot;|&#x27;|&#x2F;'\n\n    # Regexes containing the keys and values listed immediately above.\n    entityRegexes =\n      escape:   new RegExp('[' + escapeKeys + ']', 'g')\n      unescape: new RegExp('(' + unescapeKeys + ')', 'g')\n\n    # Functions for escaping and unescaping strings to/from HTML interpolation.\n    ['escape', 'unescape'].forEach((method) ->\n      _[method] = (string) ->\n        if string == null || string == undefined\n          return ''\n\n        ('' + string).replace(entityRegexes[method], (match) ->\n          entityMap[method][match]\n        )\n    )\n\n    settings =\n      evaluate: /<%([\\s\\S]+?)%>/g\n      interpolate: /<%=([\\s\\S]+?)%>/g\n      escape: /<%-([\\s\\S]+?)%>/g\n\n    noMatch = /(.)^/\n    escapes =\n      # jshint quotmark:false\n      \"'\": \"'\"\n      '\\\\': '\\\\'\n      '\\r': 'r'\n      '\\n': 'n'\n      '\\t': 't'\n      '\\u2028': 'u2028'\n      '\\u2029': 'u2029'\n\n    escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g\n\n    # Combine delimiters into one regular expression via alternation.\n    matcher = new RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g')\n\n    # Compile the template source, escaping string literals appropriately.\n    index = 0\n    source = \"__p+='\"\n    text.replace(matcher, (match, escape, interpolate, evaluate, offset) ->\n      source += text.slice(index, offset)\n      .replace(escaper, (match) ->\n        return '\\\\' + escapes[match]\n      )\n\n      if escape\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\"\n      if interpolate\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\"\n      if evaluate\n        source += \"';\\n\" + evaluate + \"\\n__p+='\"\n      index = offset + match.length\n\n      match\n    )\n    source += \"';\\n\"\n\n    # If a variable is not specified, place data values in local scope.\n    if not settings.variable\n      source = 'with(obj||{}){\\n' + source + '}\\n'\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + \"return __p;\\n\"\n\n    try\n      # jshint evil:true\n      render = new Function(settings.variable || 'obj', '_', source)\n    catch err\n      err.source = source\n      throw err\n\n    if data\n      return render(data, _)\n\n    template = (data) ->\n      render.call(this, data, _)\n\n    # Provide the compiled function source as a convenience for precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}'\n\n    template\n\n  # this.render = function(templateMarkup, data) {\n  #   var tmpl = template(templateMarkup);\n  #   return tmpl(data);\n  # }\n\nmodule.exports = UnderscoreTemplateAdapter\n"
  ],
  "sourceRoot": ".."
}